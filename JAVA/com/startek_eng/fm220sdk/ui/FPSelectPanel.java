/*
 * FPSelectPanel.java
 *
 * Created on December 6, 2006, 8:56 AM
 */

package com.startek_eng.fc320sdk.ui;
import java.awt.GridBagLayout;
import java.awt.GridBagConstraints;
import java.awt.BorderLayout;
import java.awt.FlowLayout;
import java.awt.Dimension;
import java.awt.Insets;

import javax.swing.ImageIcon;
import javax.swing.JPanel;
import javax.swing.JLabel;
import javax.swing.JButton;

/**
 *
 * @author  liaocl
 */
public class FPSelectPanel extends javax.swing.JPanel {

	/** Creates new form FPSelectPanel */
	public FPSelectPanel(JButton btnOK) {
		_btnOK = btnOK;
		initComponents();
        if (myResourceBundle!=null)
            myResourceBundle.localizeUI(this);
        ME = this;
	}

    String getResourceString(String defaultStr)
    {
         if (myResourceBundle!=null)
         {
             String key = defaultStr.replace(' ', '_'); 
             return myResourceBundle.getResourceString(key, defaultStr);   
         }else
             return defaultStr;
    }
	public void reInitial(JButton btnOK)
	{
		_btnOK = btnOK;
		if (curSelected>=0 && curSelected<fingerLbl.length)
		{
			try
			{
				fingerLbl[curSelected].setDisabledIcon(new ImageIcon(new java.net.URL(this.getClass().getResource("img/hand_out_"+curSelected+".GIF"),"hand_out_"+curSelected+".GIF")));
			}
			catch (java.net.MalformedURLException e )
			{
				e.printStackTrace();
			}
		}
		for (int i=0;i<fingerLbl.length;i++)
		{
			fingerLbl[i].setEnabled(false);
		}
		curSelected = -1;
	}
	public void setMessage(String msg)
	{
		msgLbl.setText(msg);
	}
	static FPSelectPanel instance = null;
    public static boolean m_EnableSound = true;
	public static FPSelectPanel getInstance(JButton btnOK)
	{
		if (instance == null)
		{
			instance = new FPSelectPanel(btnOK);
		}
		return instance;
	}
	/** This method is called from within the constructor to
	 * initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is
	 * always regenerated by the Form Editor.
	 */
	private void initComponents() {//GEN-BEGIN:initComponents
		initMainPanel();
		initFinger();
		initLeftHand();
		initRightHand();
		initMsgPanel();
		
	}//GEN-END:initComponents
	private void initMsgPanel()
	{
		msgLbl = new JLabel(getResourceString("Please select the finger you enrolled"));
		msgPanel.add(msgLbl,BorderLayout.CENTER);
		lblStatus = new JLabel();
		//btnPanel.add(lblStatus,BorderLayout.NORTH);
	}
	private void initLeftHand()
	{
		try
		{
			JPanel tmpPanel = new JPanel(new GridBagLayout());
			JLabel handl = new JLabel(new ImageIcon(new java.net.URL(this.getClass().getResource("img/hand_l.GIF"),"hand_l.GIF")));
			GridBagConstraints cbag = new GridBagConstraints();
			cbag.insets = new Insets(0,0,0,0);  //area padding
			cbag.weightx = 0.8;		//x(width)的比例
			cbag.weighty = 0.5;		//y(height)的比例
			cbag.gridx = 0;			//位置
			cbag.gridy = 1;			//位置
			cbag.gridheight = 1;	//單位
			cbag.gridwidth = 4;		//單位
			tmpPanel.add(handl,cbag);
			cbag.weightx = 0.2;		//x(width)的比例
			cbag.weighty = 1;		//y(height)的比例
			cbag.gridx = 4;			//位置
			cbag.gridy = 0;			//位置
			cbag.gridheight = 2;	//單位
			cbag.gridwidth = 1;		//單位
			tmpPanel.add(fingerLbl[5],cbag);
			cbag.weightx = 0.2;		//x(width)的比例
			cbag.weighty = 0.5;		//y(height)的比例
			cbag.gridx = 3;			//位置
			cbag.gridy = 0;			//位置
			cbag.gridheight = 1;	//單位
			cbag.gridwidth = 1;		//單位
			tmpPanel.add(fingerLbl[6],cbag);
			cbag.gridx = 2;			//位置
			tmpPanel.add(fingerLbl[7],cbag);
			cbag.gridx = 1;			//位置
			tmpPanel.add(fingerLbl[8],cbag);
			cbag.gridx = 0;			//位置
			tmpPanel.add(fingerLbl[9],cbag);
			leftHandPanel.add(tmpPanel,cbag);
		}
		catch (java.net.MalformedURLException e)
		{
			e.printStackTrace();
		}
	}
	private void initRightHand()
	{
		try
		{
			JPanel tmpPanel = new JPanel(new GridBagLayout());
			JLabel handr = new JLabel(new ImageIcon(new java.net.URL(this.getClass().getResource("img/hand_r.GIF"),"hand_r.GIF")));
			GridBagConstraints cbag = new GridBagConstraints();
			cbag.insets = new Insets(0,0,0,0);  //area padding
			cbag.weightx = 0.8;		//x(width)的比例
			cbag.weighty = 0.5;		//y(height)的比例
			cbag.gridx = 1;			//位置
			cbag.gridy = 1;			//位置
			cbag.gridheight = 1;	//單位
			cbag.gridwidth = 4;		//單位
			tmpPanel.add(handr,cbag);
			cbag.weightx = 0.2;		//x(width)的比例
			cbag.weighty = 1;		//y(height)的比例
			cbag.gridx = 0;			//位置
			cbag.gridy = 0;			//位置
			cbag.gridheight = 2;	//單位
			cbag.gridwidth = 1;		//單位
			tmpPanel.add(fingerLbl[0],cbag);
			cbag.weightx = 0.2;		//x(width)的比例
			cbag.weighty = 0.5;		//y(height)的比例
			cbag.gridx = 1;			//位置
			cbag.gridy = 0;			//位置
			cbag.gridheight = 1;	//單位
			cbag.gridwidth = 1;		//單位
			tmpPanel.add(fingerLbl[1],cbag);
			cbag.gridx = 2;			//位置
			tmpPanel.add(fingerLbl[2],cbag);
			cbag.gridx = 3;			//位置
			tmpPanel.add(fingerLbl[3],cbag);
			cbag.gridx = 4;			//位置
			tmpPanel.add(fingerLbl[4],cbag);
			//rightHandPanel.add(handr);
			//rightHandPanel.add(fingerLbl[0]);
			//rightHandPanel.add(fingerLbl[1]);
			//rightHandPanel.add(fingerLbl[2]);
			//rightHandPanel.add(fingerLbl[3]);
			rightHandPanel.add(tmpPanel);
			//rightHandPanel
		}
		catch (java.net.MalformedURLException e)
		{
			e.printStackTrace();
		}
	}
	private boolean isRestrictedFinger(JLabel sourceComp)
	{
		boolean result = false;
		if (selectionRestrictions==null)
		{
			result = true;
		}else
		{
			for (int x=0;x<selectionRestrictions.length;x++)
			{
				if ((selectionRestrictions[x]>=0 && selectionRestrictions[x]<fingerLbl.length) 
					&&	sourceComp.equals(fingerLbl[selectionRestrictions[x]]))
				{
					result = true;
					break;
				}
			}
		}
		return result;
	}
	private void initFinger()
	{
		for (int i=0;i<fingerLbl.length;i++)
		{
			try
			{
				fingerLbl[i] = new JLabel(new ImageIcon(new java.net.URL(this.getClass().getResource("img/hand_in_"+i+".GIF"),"hand_in_"+i+".GIF")));
				fingerLbl[i].setDisabledIcon(new ImageIcon(new java.net.URL(this.getClass().getResource("img/hand_out_"+i+".GIF"),"hand_out_"+i+".GIF")));
				fingerLbl[i].setEnabled(false);
				//String tmpStr = i+"";
				fingerLbl[i].setToolTipText(getResourceString(fingerNames[i]));
				fingerLbl[i].addMouseListener(new java.awt.event.MouseAdapter()
				{
					public void mouseEntered(java.awt.event.MouseEvent ev)
					{
						JLabel sourceComp = (JLabel)ev.getSource();
						if (isRestrictedFinger(sourceComp))
						{
							sourceComp.setEnabled(true);
						}
						FPSelectPanel.this.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
					}
					public void mouseExited(java.awt.event.MouseEvent ev)
					{
						JLabel sourceComp = (JLabel)ev.getSource();
						if (isRestrictedFinger(sourceComp))
						{
							sourceComp.setEnabled(false);
						}
						FPSelectPanel.this.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
					}
					
					public void mouseClicked(java.awt.event.MouseEvent ev)
					{
						int index = curSelected;//Integer.parseInt(((JLabel)ev.getSource()).getToolTipText());//
						JLabel sourceComp = (JLabel)ev.getSource();
						if (isRestrictedFinger(sourceComp))
						{
							for (int x=0;x<fingerLbl.length;x++)
							{
								if (sourceComp.equals(fingerLbl[x]))
								{
									index = x;
									break;
								}
							}
						}
						try
						{
							if (curSelected!=index)
							{
								if (curSelected>=0)
								{
									fingerLbl[curSelected].setDisabledIcon(new ImageIcon(new java.net.URL(this.getClass().getResource("img/hand_out_"+curSelected+".GIF"),"hand_out_"+curSelected+".GIF")));
								}
								((JLabel)ev.getSource()).setDisabledIcon(new ImageIcon(new java.net.URL(this.getClass().getResource("img/hand_ok_"+index+".GIF"),"hand_ok_"+index+".GIF")));
								curSelected = index;
								if (_btnOK!=null)
								{
									_btnOK.setVisible(true);
                                    
								}
                                synchronized(ME)
                                {
                                    ME.notifyAll();
                                }
                                if (m_EnableSound)
                                {
                                    java.awt.Toolkit.getDefaultToolkit().beep();
                                }
							}
						}
						catch (java.net.MalformedURLException e)
						{
							e.printStackTrace();
						}
						((JLabel)ev.getSource()).setEnabled(false);
					}
				});
			}
			catch (java.net.MalformedURLException e )
			{
				e.printStackTrace();
			}
		}
	}
	private void initMainPanel()
	{
		this.setLayout(new GridBagLayout());
		setBackground(new java.awt.Color(255, 255, 255));
		GridBagConstraints cbag = new GridBagConstraints();
		
		msgPanel = new JPanel(new BorderLayout());
		leftHandPanel = new JPanel(new GridBagLayout());
		rightHandPanel = new JPanel(new GridBagLayout());
		btnPanel = new JPanel(new FlowLayout(FlowLayout.LEFT));
		
		leftHandPanel.setOpaque(false);
		rightHandPanel.setOpaque(false);
		msgPanel.setOpaque(false);
		btnPanel.setOpaque(false);
		
		//msgPanel.setBackground(new java.awt.Color(0, 0, 255));
		//leftHandPanel.setBackground(new java.awt.Color(0, 255, 0));
		//rightHandPanel.setBackground(new java.awt.Color(255, 0, 0));
		//btnPanel.setBackground(new java.awt.Color(100, 100, 100));

		msgPanel.setPreferredSize(new Dimension(400,40));
		leftHandPanel.setPreferredSize(new Dimension(200,200));
        leftHandPanel.setMinimumSize(new Dimension(200,200));
		rightHandPanel.setPreferredSize(new Dimension(200,200));
        rightHandPanel.setMinimumSize(new Dimension(200,200));
		btnPanel.setPreferredSize(new Dimension(400,40));
        btnPanel.setMinimumSize(new Dimension(400,40));
		cbag.fill = GridBagConstraints.BOTH; //GridBagConstraints.HORIZONTAL;
		//cbag.anchor = GridBagConstraints.PAGE_START ;END 
//		cbag.anchor = GridBagConstraints.PAGE_START;
		cbag.insets = new Insets(5,50,0,0);  //area padding
		cbag.weightx = 1;		//x(width)的比例
		cbag.weighty = 0.2;		//y(height)的比例
		cbag.gridx = 0;			//位置
		cbag.gridy = 1;			//位置
		cbag.gridheight = 1;	//單位
		cbag.gridwidth = 6;		//單位
		this.add(msgPanel,cbag);
		msgLbl = new JLabel();
		msgPanel.add(msgLbl,BorderLayout.SOUTH);
//		cbag.anchor = GridBagConstraints.PAGE_END;
		cbag.insets = new Insets(0,0,0,0);  //area padding
		cbag.weightx = 1;		//x(width)的比例
		cbag.weighty = 0.2;	//y(height)的比例
		cbag.gridheight = 1;	//單位
		cbag.gridwidth = 6;		//單位
		cbag.gridx = 0;			//位置
		cbag.gridy = 8;			//位置
		//this.add(btnPanel,cbag);
		cbag.insets = new Insets(0,0,0,0);  //area padding
//		cbag.anchor = GridBagConstraints.LINE_START;
		cbag.weightx = 0.5;		//x(width)的比例
		cbag.weighty = 0.6;		//y(height)的比例
		cbag.gridx = 0;			//位置
		cbag.gridy = 2;			//位置
		cbag.gridheight = 3;	//單位
		cbag.gridwidth = 3;		//單位
		this.add(leftHandPanel,cbag);
		cbag.insets = new Insets(0,0,0,0);  //area padding
//		cbag.anchor = GridBagConstraints.LINE_END;
		cbag.weightx = 0.5;		//x(width)的比例
		cbag.weighty = 0.6;		//y(height)的比例
		cbag.gridheight = 3;	//單位
		cbag.gridwidth = 3;		//單位
		cbag.gridx = 3;			//位置
		cbag.gridy = 2;			//位置
		this.add(rightHandPanel,cbag);
        this.setMinimumSize(new Dimension(360,230));
        this.setPreferredSize(new Dimension(360,230));
        this.setMaximumSize(new Dimension(360,230));
	}
	public void showStatus(String msg)
	{
		lblStatus.setText(msg);
	}
    Object ME = null;
	JPanel msgPanel = null;
	JPanel leftHandPanel = null;
	JPanel rightHandPanel = null;
	JPanel btnPanel = null;
	
	JLabel msgLbl = null;
	JLabel lblStatus = null;
	JLabel fingerLbl[] = new JLabel[10];
	//JButton btnRestart = null;
	JButton _btnOK = null;
	//JButton btnExit = null;
	int curSelected = -1;
	boolean sensorOK = false;
    static SDKClientResourceBundle  myResourceBundle = null;
	private static String fingerNames[]={	"Right Thumb",
                                            "Right Index",
                                            "Right Middle",
                                            "Right Ring",
                                            "Right Little", 
                                            "Left Thumb",
                                            "Left Index",
                                            "Left Middle",
                                            "Left Ring",
                                            "Left Little"};
    static
    {
         try
        {
            myResourceBundle = SDKClientResourceBundle.getDefaultInstance();
        }catch(java.util.MissingResourceException ignore)
        {}
    }
    int[] selectionRestrictions = null;
    
	// Variables declaration - do not modify//GEN-BEGIN:variables
	// End of variables declaration//GEN-END:variables
	public boolean isSensorReady()
	{
		return sensorOK;
	}
	public int getSelectedFinger()
	{
		return curSelected;
	}
	public void setSelectedFinger(int index)
	{
		try
		{
			if (curSelected!=index)
			{
				if (curSelected>=0)
				{
					fingerLbl[curSelected].setDisabledIcon(new ImageIcon(new java.net.URL(this.getClass().getResource("img/hand_out_"+curSelected+".GIF"),"hand_out_"+curSelected+".GIF")));
				}
                if (index >=0)
                    fingerLbl[index].setDisabledIcon(new ImageIcon(new java.net.URL(this.getClass().getResource("img/hand_ok_"+index+".GIF"),"hand_ok_"+index+".GIF")));
                
				curSelected = index;
				if (_btnOK!=null)
				{
					_btnOK.setVisible(true);
				}
			}
		}
		catch (java.net.MalformedURLException e)
		{
			e.printStackTrace();
		}
        if (index >=0 && index<=fingerLbl.length)
            fingerLbl[index].setEnabled(false);
	}
	public void setSelectionRestriction(int[] selections)
	{
		selectionRestrictions = selections;
	}
	public static String getFingerName(int fpIndex)
	{
		if (fpIndex>=0 && fpIndex<fingerNames.length)
		{
			return fingerNames[fpIndex];
		}
		return null;
	}
	public static void main(String[] args)
	{
		FPSelectPanel panel = new FPSelectPanel((JButton)null);

		javax.swing.JFrame frame = new javax.swing.JFrame();
		//EXIT_ON_CLOSE == 3
		frame.setDefaultCloseOperation(3);
		frame.setTitle("FPEnrollPanel Test");
		frame.getContentPane().add(panel, java.awt.BorderLayout.CENTER);
		frame.setSize(350,240);
		java.awt.Dimension d = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
		frame.setLocation((d.width - frame.getSize().width) / 2, (d.height - frame.getSize().height) / 2);
		frame.setVisible(true);
	}
}
